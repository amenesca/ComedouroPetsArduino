#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#define button1 5 // Pino do botao 1
#define button2 6 // pino do botao 2
#define button3 7 // pino do botao3

#define STEPS_PER_REV 512
#define PHASES 4

byte HOR[4] = {0x09,0x03,0x06,0x0C};    // Matriz dos bytes das Fases do Motor - sentido Horário Full Step
byte AHO[4] = {0x0C,0x06,0x03,0x09};    // Matriz dos bytes das Fases do Motor - sentido Anti-Horário Full Step
int atraso_fase = 2 ;                   // Intervalo de tempo entre as fases em milisegundos - min 2 para Full Step 

LiquidCrystal_I2C lcd(0x27,16,2); //endereçamento do LCD

unsigned long startMillis; // Armazena o tempo inicial

// declaraçao das minhas funçoes e variáveis
int setar_intervalo = 0;
bool intervalo_salvo = 0;
long unsigned int intervalo = 0;
int setar_peso = 0;
bool peso_salvo = 0;
int peso = 0;
int tempoParaDespejar;

void iniciarConfiguracao();
void configurarIntervalo();
void iniciar();
bool contagemRegressiva();
void Motor_HOR(int atraso_fase, int tempo_segundos);

void setup ()
{
//   //mensagens do LCD
  lcd.begin(16,2, 0x27); //inicializacao do display
  lcd.backlight(); // ligacao do backlight do LCD
  lcd.print("Comedouro Pets");
  delay(1500);
  lcd.clear();

  pinMode(button1, INPUT_PULLUP);
  pinMode(button2, INPUT_PULLUP);
  pinMode(button3, INPUT_PULLUP);

  DDRB = 0x0F;           // Configura Portas D08,D09,D10 e D11 como saída 
  PORTB = 0x00;          // Reset dos bits da Porta B (D08 a D15) 
}

void loop ()
{
  if (digitalRead(button1) == LOW){ // botao 1 primeira configuracao
    iniciarConfiguracao();
  }

  if (digitalRead(button2) == LOW){
    if (peso_salvo == 1 && intervalo_salvo == 1)
    {
      iniciar();
    }
    else {
      lcd.print("Erro");
      lcd.setCursor(0,1);
      lcd.print("Nao Configurado");
      lcd.setCursor(0,0);
      delay(1500);
      lcd.clear();
    }
  }
  if (digitalRead(button3) == LOW){ // forçar saida de raçao sem timer ?
    lcd.print("Botao 3");
    delay(1500); //intervalo de espera para leitura
    lcd.clear();
  }

  lcd.print("Comedouro Pets");
  delay(500); //intervalo de espera para leitura
  lcd.clear();
}

void iniciarConfiguracao(void)
{
  intervalo_salvo = 0;
  peso_salvo = 0;
  while(1) {
    
    lcd.setCursor(0,0);
    lcd.print("Configuracao");
    lcd.setCursor(0, 1);  // Posiciona o cursor na segunda linha, coluna 0
    if (intervalo_salvo == 0)
    {
      lcd.print("Defina intervalo");
    }
    if (peso_salvo == 0 && intervalo_salvo == 1)
    {
      lcd.print("Defina Peso");
    }
    delay(500);
    lcd.clear();
    if (peso_salvo == 1 && intervalo_salvo == 1)
    {
      lcd.setCursor(0,0);
      lcd.print("Configuracao");
      lcd.setCursor(0,1);
      lcd.print("Concluida");
      lcd.setCursor(0,0);
      delay(1500);
      lcd.clear();
      break;
    }

    if (digitalRead(button2) == LOW && intervalo_salvo == 0) { // vai iniciar a configuração de intervalo
      configurarIntervalo();
    }
    if (digitalRead(button2) == LOW && intervalo_salvo == 1 && peso_salvo == 0) { // vai iniciar a configuração de peso
      configurarPeso();
    }

    if (digitalRead(button3) == LOW) { // Vai quitar das configurações sem salvar nada
      lcd.setCursor(0,0);
      lcd.print("Nao Salvo");
      delay(500);
      lcd.clear();
      intervalo_salvo = 0;
      peso_salvo = 0;
      break;
    }
  }
  lcd.setCursor(0,0);
  lcd.clear();
}

void configurarIntervalo() {
  lcd.setCursor(0,0);
  lcd.print("Intervalo");
  delay(500);
  lcd.clear();
  while(1) {
    lcd.setCursor(0,0);
    lcd.print("Intervalo");
    if (digitalRead(button2) == LOW)
    {
      setar_intervalo++;
      if (setar_intervalo == 5)
      {
        setar_intervalo = 0;
      }
    }
    lcd.setCursor(0, 1);  // Posiciona o cursor na segunda linha, coluna 0
    if (setar_intervalo == 0)
    {
      lcd.print("1 minutos");
      intervalo = 1UL * 60  * 1000;
    }
    else if (setar_intervalo == 1)
    {
        lcd.print("5 horas");
        intervalo = 5UL * 60 * 60 * 1000;
    }
    else if (setar_intervalo == 2)
    {
        lcd.print("6 horas");
        intervalo = 6UL * 60 * 60 * 1000;
    }
    else if (setar_intervalo == 3)
    {
        lcd.print("7 horas");
        intervalo = 7UL * 60 * 60 * 1000;
    }
    else if (setar_intervalo == 4)
    {
        lcd.print("8 horas");
        intervalo = 8UL * 60 * 60 * 1000;
    }
    delay(250);
    lcd.clear();
    if (digitalRead(button1) == LOW) { // vai salvar a configuração de intervalo
      lcd.setCursor(0,0);
      lcd.print("Intervalo Salvo");
      delay(1500);
      lcd.clear();
      intervalo_salvo = 1;
      break;
    }
    if (digitalRead(button3) == LOW) { // vai quitar da configuração de intervalo
      lcd.setCursor(0,0);
      lcd.print("Nao Salvo");
      delay(1500);
      lcd.clear();
      intervalo_salvo = 0;
      break;
    } 
  }
  return ;
}

void configurarPeso()
{
  lcd.setCursor(0,0);
  lcd.print("Peso");
  delay(500);
  lcd.clear();
  while(1) {
    lcd.setCursor(0,0);
    lcd.print("Peso");
    if (digitalRead(button2) == LOW)
    {
      setar_peso++;
      if (setar_peso == 14)
      {
        setar_peso = 0;
      }
    }
    lcd.setCursor(0, 1);  // Posiciona o cursor na segunda linha, coluna 0
    if (setar_peso == 0)
    {
      lcd.print("100 gramas");
      peso = 100;
      tempoParaDespejar = 4;
    }
    else if (setar_peso == 1)
    {
        lcd.print("150 gramas");
        peso = 150;
      tempoParaDespejar = 6;
    }
    else if (setar_peso == 2)
    {
        lcd.print("200 gramas");
        peso = 200;
        tempoParaDespejar = 8;
    }
    else if (setar_peso == 3)
    {
        lcd.print("250 gramas");
        peso = 250;
        tempoParaDespejar = 10;
    }
    else if (setar_peso == 4)
    {
        lcd.print("300 gramas");
        peso = 300;
        tempoParaDespejar = 12;
    }
    else if (setar_peso == 5)
    {
        lcd.print("350 gramas");
        peso = 350;
        tempoParaDespejar = 14;

    }
    else if (setar_peso == 6)
    {
        lcd.print("400 gramas");
        peso = 400;
        tempoParaDespejar = 16;
    }
    else if (setar_peso == 7)
    {
        lcd.print("450 gramas");
        peso = 450;
        tempoParaDespejar = 18;
    }
    else if (setar_peso == 8)
    {
        lcd.print("500 gramas");
        peso = 500;
        tempoParaDespejar = 20;
    }
    else if (setar_peso == 9)
    {
        lcd.print("550 gramas");
        peso = 550;
        tempoParaDespejar = 22;
    }
    else if (setar_peso == 10)
    {
        lcd.print("600 gramas");
        peso = 600;
        tempoParaDespejar = 24;
    }
    else if (setar_peso == 11)
    {
        lcd.print("650 gramas");
        peso = 650;
        tempoParaDespejar = 26;
    }
    else if (setar_peso == 12)
    {
        lcd.print("700 gramas");
        peso = 700;
        tempoParaDespejar = 28;
    }
    else if (setar_peso == 13)
    {
        lcd.print("750 gramas");
        peso = 750;
        tempoParaDespejar = 30;
    }
    delay(250);
    lcd.clear();
    if (digitalRead(button1) == LOW) { // vai salvar a configuração de peso
      lcd.setCursor(0,0);
      lcd.print("Peso Salvo");
      delay(1500);
      lcd.clear();
      peso_salvo = 1;
      break;
    }
    if (digitalRead(button3) == LOW) { // vai quitar da configuração de peso
      lcd.setCursor(0,0);
      lcd.print("Peso Nao Salvo");
      delay(1500);
      lcd.clear();
      peso_salvo = 0;
      break;
    } 
  }
  return ;
}

void iniciar()
{
  unsigned long int tempo_que_passou = 0;
  unsigned long int tempo_maximo = intervalo / 1000;
  bool continuar = 1;
  lcd.setCursor(0,0);
  lcd.print("Iniciando");
  delay(1500);
  lcd.clear();
  
  while (continuar != 0)
  {
    tempo_que_passou = 0;
    lcd.clear();
    lcd.print("Despejando");
    Motor_HOR(atraso_fase, tempoParaDespejar); // girar motor baseado no tempo
    delay(500);
    lcd.clear();
    startMillis = millis();
    while (contagemRegressiva())
    {
      tempo_que_passou++;
      if (tempo_que_passou >= tempo_maximo) {
        break;  
      }
      delay(1000);
      if (digitalRead(button3) == LOW) {
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("Parando Contagem");
        delay(1500);
        lcd.clear();
        continuar = 0;
        break;
      }
    }
  }
}

bool contagemRegressiva() {
  unsigned long elapsedMillis = millis() - startMillis;  // Calcula o tempo decorrido
  unsigned long remainingMillis = intervalo - elapsedMillis;  // Calcula o tempo restante

  // Converte milissegundos restantes para horas, minutos e segundos
  unsigned long secondsRemaining = remainingMillis / 1000;
  int hours = secondsRemaining / 3600;
  secondsRemaining %= 3600;
  int minutes = secondsRemaining / 60;
  int seconds = secondsRemaining % 60;

  // Atualiza a segunda linha do LCD com o tempo restante
  lcd.setCursor(0, 1);
  lcd.print("Time: ");
  lcd.print(hours);
  lcd.print(":");
  if (minutes < 10) lcd.print('0');  // Adiciona um zero para minutos < 10
  lcd.print(minutes);
  lcd.print(":");
  if (seconds < 10) lcd.print('0');  // Adiciona um zero para segundos < 10
  lcd.print(seconds);

  return true;  // Continua a contagem
}


void Motor_HOR(int atraso_fase, int tempo_segundos) // Movimento no sentido horário 
{
    // Calcular o número total de passos que o motor deve dar em tempo_segundos
    int total_passos = (tempo_segundos * 1000) / (atraso_fase * PHASES); 

    for (int i = 0; i < total_passos; i++) // Gira pelo número total de passos calculado
    {      
        for (int j = 0; j < PHASES; j++) // Incrementa o contador j de 0 a 3 
        {
            PORTB = HOR[j]; // Carrega bytes da Matriz HOR na Porta B 
            delay(atraso_fase); // Atraso de tempo entre as fases em milissegundos
        }
    }
}
